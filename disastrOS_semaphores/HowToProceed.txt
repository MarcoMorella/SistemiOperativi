Step by step!
This is a first draft of the guidelines.


- Should add the new SysCalls to the Vector of DisastrOS

- int s=DisastrOS_semOpen(int semnum) 
		//if the semnum is already in the sem_descriptors list,the semaphore is already 		open and i have to return semnum
		if( !semaphore_alloc(int id,int count)) return -1
		if( !sem_init())) return -1
		return(semnum)
	
Why?
alloc and init are two functions already defined that return 0 if there is any error. But we need a semaphore to initialize,so init can only be called after sem_alloc has succeded.
semOpen returns semnum if there is no error, else -1. 


- int s = DisastrOS_semClose(int semnum)
	//check if the semnum is in the descriptor list,if not we should return an error
	//we should notify the processes in the wait list that the semaphore they are waiting has 		been closed
	//not sure if we have any resource left to free
	return(sem_free(semnum))
	

- int s = DisastrOS_semWait(int semnum)
		if(semnum not in sem_desc_list) return ERROR_CODE
		semnum.count--
		if(semnum.count == 0)//place calling process at the end of the sem waiting list
		return 0 //success
  
. int DisastrOS_semPost(int semnum);
		if(semnum not in sem_desc_list) return ERROR_CODE
		if(semnum.count == 0)
			//awake first process in the semaphore waiting list
		return 0 //success
